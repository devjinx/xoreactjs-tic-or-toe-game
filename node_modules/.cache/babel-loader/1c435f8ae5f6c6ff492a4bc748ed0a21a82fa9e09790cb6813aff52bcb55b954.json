{"ast":null,"code":"var _jsxFileName = \"/Users/jin/Documents/xoreactjs/Documents/xo/my-app/src/board.js\",\n  _s = $RefreshSig$();\n// Importing the CSS for the board\nimport \"./board.css\";\n\n// Importing the useState hook, useEffect hook and useRef hook\nimport { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = _ref => {\n  _s();\n  let {\n    reset,\n    setReset,\n    winner,\n    setWinner\n  } = _ref;\n  // Creating a turn state, which indicates the current turn\n  const [turn, setTurn] = useState(0);\n\n  // Creating a data state, which contains the \n  // current picture of the board\n  const [data, setData] = useState(['', '', '', '', '', '', '', '', '']);\n\n  // Creating a reference for the board\n  const boardRef = useRef(null);\n\n  // Function to draw on the board\n  const draw = (event, index) => {\n    // Draws only if the position is not taken \n    // and winner is not decided yet\n    if (data[index - 1] === '' && winner === '') {\n      // Draws X if it's player 1's turn else draws O\n      const current = turn === 0 ? \"X\" : \"O\";\n\n      // Updating the data state\n      data[index - 1] = current;\n\n      //Drawing on the board\n      event.target.innerText = current;\n\n      // Switching the turn\n      setTurn(turn === 0 ? 1 : 0);\n    }\n  };\n\n  // UseEffect hook used to reset the board whenever \n  // a winner is decided\n  useEffect(() => {\n    // Clearing the data state\n    setData(['', '', '', '', '', '', '', '', '']);\n\n    // Getting all the children(cells) of the board\n    const cells = boardRef.current.children;\n\n    // Clearing out the board\n    for (let i = 0; i < 9; i++) {\n      cells[i].innerText = '';\n    }\n\n    // Resetting the turn to player 0\n    setTurn(0);\n\n    // Resetting the winner\n    setWinner('');\n    setReset(false);\n  }, [reset, setReset, setWinner]);\n\n  // useEffect hook used to check for a winner\n  useEffect(() => {\n    // Checks for the win condition in rows\n    const checkRow = () => {\n      let ans = false;\n      for (let i = 0; i < 9; i += 3) {\n        ans |= data[i] === data[i + 1] && data[i] === data[i + 2] && data[i] !== '';\n      }\n      return ans;\n    };\n\n    // Checks for the win condition in cols\n    const checkCol = () => {\n      let ans = false;\n      for (let i = 0; i < 3; i++) {\n        ans |= data[i] === data[i + 3] && data[i] === data[i + 6] && data[i] !== '';\n      }\n      return ans;\n    };\n\n    // Checks for the win condition in diagonals\n    const checkDiagonal = () => {\n      return data[0] === data[4] && data[0] === data[8] && data[0] !== '' || data[2] === data[4] && data[2] === data[6] && data[2] !== '';\n    };\n\n    // Checks if at all a win condition is present\n    const checkWin = () => {\n      return checkRow() || checkCol() || checkDiagonal();\n    };\n\n    // Checks for a tie\n    const checkTie = () => {\n      let count = 0;\n      data.forEach(cell => {\n        if (cell !== '') {\n          count++;\n        }\n      });\n      return count === 9;\n    };\n\n    // Setting the winner in case of a win\n    if (checkWin()) {\n      setWinner(turn === 0 ? \"Player 2 Wins!\" : \"Player 1 Wins!\");\n    } else if (checkTie()) {\n      // Setting the winner to tie in case of a tie\n      setWinner(\"It's a Tie!\");\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: boardRef,\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-1\",\n      onClick: e => draw(e, 1)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-2\",\n      onClick: e => draw(e, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-3\",\n      onClick: e => draw(e, 3)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-4\",\n      onClick: e => draw(e, 4)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-5\",\n      onClick: e => draw(e, 5)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-6\",\n      onClick: e => draw(e, 6)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-7\",\n      onClick: e => draw(e, 7)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-8\",\n      onClick: e => draw(e, 8)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-9\",\n      onClick: e => draw(e, 9)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n};\n_s(Board, \"m8pm9NfBT3dGvaWx6ilLK/5xteI=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","useEffect","useRef","jsxDEV","_jsxDEV","Board","_ref","_s","reset","setReset","winner","setWinner","turn","setTurn","data","setData","boardRef","draw","event","index","current","target","innerText","cells","children","i","checkRow","ans","checkCol","checkDiagonal","checkWin","checkTie","count","forEach","cell","ref","className","onClick","e","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jin/Documents/xoreactjs/Documents/xo/my-app/src/board.js"],"sourcesContent":["// Importing the CSS for the board\nimport \"./board.css\";\n  \n// Importing the useState hook, useEffect hook and useRef hook\nimport { useState, useEffect, useRef } from \"react\";\n  \nconst Board = ({ reset, setReset, winner, setWinner }) => {\n  \n    // Creating a turn state, which indicates the current turn\n    const [turn, setTurn] = useState(0);\n  \n    // Creating a data state, which contains the \n    // current picture of the board\n    const [data, setData] = useState(['', '', '', '', '', \n        '', '', '', ''])\n  \n    // Creating a reference for the board\n    const boardRef = useRef(null);\n  \n    // Function to draw on the board\n    const draw = (event, index) => {\n        // Draws only if the position is not taken \n        // and winner is not decided yet\n        if (data[index - 1] === '' && winner === '') {\n  \n            // Draws X if it's player 1's turn else draws O\n            const current = turn === 0 ? \"X\" : \"O\"\n  \n            // Updating the data state\n            data[index - 1] = current;\n  \n            //Drawing on the board\n            event.target.innerText = current;\n  \n            // Switching the turn\n            setTurn(turn === 0 ? 1 : 0)\n        }\n    }\n  \n    // UseEffect hook used to reset the board whenever \n    // a winner is decided\n    useEffect(() => {\n  \n        // Clearing the data state\n        setData(['', '', '', '', '', '', '', '', '']);\n  \n        // Getting all the children(cells) of the board\n        const cells = boardRef.current.children\n  \n        // Clearing out the board\n        for (let i = 0; i < 9; i++) {\n            cells[i].innerText = '';\n        }\n  \n        // Resetting the turn to player 0\n        setTurn(0);\n  \n        // Resetting the winner\n        setWinner('');\n        setReset(false);\n    }, [reset, setReset, setWinner])\n  \n  \n    // useEffect hook used to check for a winner\n    useEffect(() => {\n  \n        // Checks for the win condition in rows\n        const checkRow = () => {\n            let ans = false;\n            for (let i = 0; i < 9; i += 3) {\n                ans |= (data[i] === data[i + 1] && \n                data[i] === data[i + 2] && \n                data[i] !== '')\n            }\n            return ans;\n        }\n  \n        // Checks for the win condition in cols\n        const checkCol = () => {\n            let ans = false;\n            for (let i = 0; i < 3; i++) {\n                ans |= (data[i] === data[i + 3] && \n                data[i] === data[i + 6] && \n                data[i] !== '')\n            }\n            return ans;\n        }\n  \n        // Checks for the win condition in diagonals\n        const checkDiagonal = () => {\n            return ((data[0] === data[4] && \n            data[0] === data[8] && data[0] !== '') || \n            (data[2] === data[4] && data[2] === data[6] && \n            data[2] !== ''));\n        }\n  \n        // Checks if at all a win condition is present\n        const checkWin = () => {\n            return (checkRow() || checkCol() || checkDiagonal());\n        }\n  \n        // Checks for a tie\n        const checkTie = () => {\n            let count = 0;\n            data.forEach((cell) => {\n                if (cell !== '') {\n                    count++;\n                }\n            })\n            return count === 9;\n        }\n  \n        // Setting the winner in case of a win\n        if (checkWin()) {\n            setWinner(turn === 0 ? \"Player 2 Wins!\" : \n            \"Player 1 Wins!\");\n        } else if (checkTie()) {\n  \n            // Setting the winner to tie in case of a tie\n            setWinner(\"It's a Tie!\");\n        }\n  \n    })\n  \n    return (\n        <div ref={boardRef} className=\"board\">\n            <div className=\"input input-1\" \n                onClick={(e) => draw(e, 1)}></div>\n            <div className=\"input input-2\" \n                onClick={(e) => draw(e, 2)}></div>\n            <div className=\"input input-3\" \n                onClick={(e) => draw(e, 3)}></div>\n            <div className=\"input input-4\" \n                onClick={(e) => draw(e, 4)}></div>\n            <div className=\"input input-5\" \n                onClick={(e) => draw(e, 5)}></div>\n            <div className=\"input input-6\" \n                onClick={(e) => draw(e, 6)}></div>\n            <div className=\"input input-7\" \n                onClick={(e) => draw(e, 7)}></div>\n            <div className=\"input input-8\" \n                onClick={(e) => draw(e, 8)}></div>\n            <div className=\"input input-9\" \n                onClick={(e) => draw(e, 9)}></div>\n        </div>\n    )\n}\n  \nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}