{"ast":null,"code":"var _jsxFileName = \"/Users/jin/Documents/xoreactjs/src/App.js\",\n  _s = $RefreshSig$();\n// Importing the required components\nimport Board from './board';\nimport Info from \"./info\";\n\n// Importing the CSS File\nimport \"./App.css\";\n\n// Importing the useState hook\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Creating a reset state, which indicates whether \n  // the game should be reset or not\n  const [reset, setReset] = useState(false);\n\n  // Creating a winner state, which indicates\n  // the current winner\n  const [winner, setWinner] = useState('');\n\n  // Sets the reset property to true\n  // which starts the chain \n  // reaction of resetting the board\n  const resetBoard = () => {\n    setReset(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `winner ${winner !== '' ? '' : 'shrink'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"winner-text\",\n        children: winner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => resetBoard(),\n        children: \"Reset Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      reset: reset,\n      setReset: setReset,\n      winner: winner,\n      setWinner: setWinner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Info, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"mqcDVv37LYKnOfmyjlI9doxq/aw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Board","Info","useState","jsxDEV","_jsxDEV","App","_s","reset","setReset","winner","setWinner","resetBoard","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/jin/Documents/xoreactjs/src/App.js"],"sourcesContent":["\n// Importing the required components\nimport Board from './board';\nimport Info from \"./info\";\n  \n// Importing the CSS File\nimport \"./App.css\";\n  \n// Importing the useState hook\nimport { useState } from 'react';\n  \nfunction App() {\n  \n    // Creating a reset state, which indicates whether \n    // the game should be reset or not\n    const [reset, setReset] = useState(false);\n  \n    // Creating a winner state, which indicates\n    // the current winner\n    const [winner, setWinner] = useState('');\n  \n    // Sets the reset property to true\n    // which starts the chain \n    // reaction of resetting the board\n    const resetBoard = () => {\n        setReset(true);\n    }\n  \n    return (\n        <div className=\"App\">\n            {/* Shrinks the popup when there is no winner */}\n            <div className={`winner ${winner !== '' ? '' : 'shrink'}`}>\n                {/* Display the current winner */}\n                <div className='winner-text'>{winner}</div>\n                {/* Button used to reset the board */}\n                <button onClick={() => resetBoard()}>\n                    Reset Board\n                </button>\n            </div>\n            {/* Custom made board component comprising of \n            the tic-tac-toe board  */}\n            <Board reset={reset} setReset={setReset} winner={winner} \n                setWinner={setWinner} />\n            <Info />\n        </div>\n    );\n}\n  \nexport default App;"],"mappings":";;AACA;AACA,OAAOA,KAAK,MAAM,SAAS;AAC3B,OAAOC,IAAI,MAAM,QAAQ;;AAEzB;AACA,OAAO,WAAW;;AAElB;AACA,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEX;EACA;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;;EAEzC;EACA;EACA,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAExC;EACA;EACA;EACA,MAAMS,UAAU,GAAGA,CAAA,KAAM;IACrBH,QAAQ,CAAC,IAAI,CAAC;EAClB,CAAC;EAED,oBACIJ,OAAA;IAAKQ,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAEhBT,OAAA;MAAKQ,SAAS,EAAG,UAASH,MAAM,KAAK,EAAE,GAAG,EAAE,GAAG,QAAS,EAAE;MAAAI,QAAA,gBAEtDT,OAAA;QAAKQ,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAEJ;MAAM;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAO,eAE3Cb,OAAA;QAAQc,OAAO,EAAEA,CAAA,KAAMP,UAAU,EAAG;QAAAE,QAAA,EAAC;MAErC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACP,eAGNb,OAAA,CAACJ,KAAK;MAACO,KAAK,EAAEA,KAAM;MAACC,QAAQ,EAAEA,QAAS;MAACC,MAAM,EAAEA,MAAO;MACpDC,SAAS,EAAEA;IAAU;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAC5Bb,OAAA,CAACH,IAAI;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACN;AAEd;AAACX,EAAA,CAnCQD,GAAG;AAAAc,EAAA,GAAHd,GAAG;AAqCZ,eAAeA,GAAG;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}